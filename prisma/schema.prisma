// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

// This enum contains all the possible response types for a form field
enum FormResponseType {
    text
    multipleChoice
    checkbox
    image
    file
    date
    yesOrNo
}

// The main form. Each form has a title. It can have multiple fields and also multiple responses because
// it can be filled by various users.
model Form {
    id String @id @default(uuid())
    title String
    formFields FormField[]
    formCreators FormCreator[]
    formResponses FormResponse[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// The creator of the form.
model FormCreator {
    id Int @id @default(autoincrement())
    user User @relation(fields: [userId], references: [id])
    userId String
    form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
    formId String

    @@unique([userId, formId])
}

// Each field has a question, a response type, a sequence number and a config. The sequence number is used to 
// order the fields in the form. The config is a JSON that can be used to store additional information about the field. 
// For example, for a multiple choice field, the config can store the choices. Each field can also have a list 
// of responses which are the responses to this field made by various users. Finally, each field also belongs to a form.
model FormField {
    id Int @id @default(autoincrement())
    question String
    responseType FormResponseType @default(text)
    config Json?
    sequenceNumber Int @default(1)
    form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
    formId String
    formFieldResponses FormFieldResponse[]
}

// The response to a form. It has a form to which it belongs, a list of field responses which are the 
// responses to each field in the form, and the time at which the form was submitted. 
// It can also have an optional form responder which is the user who submitted the form.
// The reason that its optional is because the form can be anwsered by an anonymous user.
model FormResponse {
    id String @id @default(uuid())
    form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
    formId String
    formFieldResponses FormFieldResponse[]
    submitted_at DateTime @default(now())
    formResponder FormResponder?
}

// This model represents the relation between a field and its response.
model FormFieldResponse {
    id Int @id @default(autoincrement())
    formResponse FormResponse @relation(fields: [formResponseId], references: [id], onDelete: Cascade)
    formResponseId String
    formField FormField @relation(fields: [formFieldId], references: [id], onDelete: Cascade)
    formFieldId Int
    fieldResponse String

    @@unique([formResponseId, formFieldId])
}

// The responder of the form.
model FormResponder {
    id Int @id @default(autoincrement())
    user User @relation(fields: [userId], references: [id])
    userId String
    formResponse FormResponse @relation(fields: [formResponseId], references: [id], onDelete: Cascade)
    formResponseId String @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, formResponseId])
}

// --------------- BELOW IS THE DEFAULT SCHEMA FOR AUTH.js ---------------

model User {
    id String @id @default(uuid())
    name String?
    email String @unique
    emailVerified DateTime?
    image String?
    accounts Account[]
    sessions Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]
    formCreator FormCreator[]
    formResponder FormResponder[]
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
 
model Account {
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String?
    access_token String?
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@id([provider, providerAccountId])
}
 
model Session {
    sessionToken String @unique
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
 
model VerificationToken {
    identifier String
    token String
    expires DateTime
    
    @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
    credentialID String @unique
    userId String
    providerAccountId String
    credentialPublicKey String
    counter Int
    credentialDeviceType String
    credentialBackedUp Boolean
    transports String?
    
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@id([userId, credentialID])
}